---
title: Bind a Service to Your App
owner: Ivan Baldinotti
---

<strong><%= modified_date %></strong>

The <a href="../service-offerings/index.html" target="_blank">service marketplace</a> has a large number of data stores, from Redis and MongoDB, to MariaDB (fork of MySQL) and RabbitMQ. You can run `cf marketplace` to get an overview. In this step you will add a small MongoDB database to your app.

Create the database:

<pre class="terminal">
$ cf create-service mongodb small my-mongodb
Creating service instance my-mongodb in org MyOrg / space MySpace as user@mydomain.com...
OK

Create in progress. Use 'cf services' or 'cf service my-mongodb' to check operation status.

Attention: The plan `small` of service `mongodb` is not free.  The instance `my-mongodb` will incur a cost.  Contact your administrator if you think this is in error.
</pre>

This creates a small MongoDB database for you which we now have to bind to our application. Binding means that the credentials and URL of the service will be written dynamically into the environment variables of the app as `VCAP_SERVICES` and can hence be used directly from there.

Let's bind the new service to our existing application:

<pre class="terminal">
$ cf bind-service my-clojure-app my-mongodb
Binding service my-mongodb to app my-clojure-app in org MyOrg / space MySpace as user@mydomain.com...
OK
TIP: Use 'cf restage my-clojure-app' to ensure your env variable changes take effect
</pre>

After that we restage the application as suggested so that it includes the new credentials in its environment variables:

<pre class="terminal">
$ cf restage my-clojure-app
Restaging app my-clojure-app in MyOrg monitor / space MySpace as user@mydomain.com...
-----> Downloaded app buildpack cache (4.0K)
-----> Java Buildpack Version: v3.6 (offline) | https://github.com/cloudfoundry/java-buildpack.git#5194155
-----> Downloading Open Jdk JRE 1.8.0_71 from https://download.run.pivotal.io/openjdk/trusty/x86_64/openjdk-1.8.0_71.tar.gz (found in cache)
...
</pre>

Now we want to consume our new MongoDB from within our application. In order to do that, we will create a simple to-do list and store the tasks in the MongoDB. We also want to display all tasks as an ordered list. We have to add the library <a href="http://clojuremongodb.info/" target="_blank">Monger</a> to the dependencies by adding this to the file `project.clj`:

```clojure
[com.novemberain/monger "3.0.2"]
```
In addition, we need to use two more libraries to be able to get and correctly parse the `VCAP_SERVICES` environment variable: the library <a href="https://github.com/weavejester/environ" target="_blank">Environ</a> to get the `VCAP_SERVICES` variable and the library <a href="https://github.com/dakrone/cheshire" target="_blank">Cheshire</a> to parse the JSON variable to a Clojure map.

```clojure
[environ "1.0.2"]
[cheshire "5.5.0"]
```

Now the `project.clj` file should look something like this:

```clojure
(defproject cf-sample-app-clojure "0.1.0-SNAPSHOT"
  :description "Sample Clojure application for Cloud Foundry"
  :author "Ivan Baldinotti"
  :email "ivan.baldinotti@swisscom.com"
  :license {:name "Eclipse Public License"
            :url "http://www.eclipse.org/legal/epl-v10.html"}
  :dependencies [[org.clojure/clojure "1.8.0"]
                 [compojure "1.4.0"]
                 [ring/ring-defaults "0.1.5"]
                 [ring/ring-jetty-adapter "1.4.0"]
                 [hiccup "1.0.5"]
                 [com.novemberain/monger "3.0.2"]
                 [environ "1.0.2"]
                 [cheshire "5.5.0"]]
  :plugins [[lein-ring "0.9.7"]]
  :ring {:handler cf-sample-app-clojure.core/app}
  :profiles
  {:dev {:dependencies [[javax.servlet/servlet-api "2.5"]
                         [ring/ring-jetty-adapter "1.4.0"]
                        [ring/ring-mock "0.3.0"]]}}
  :main cf-sample-app-clojure.core
  :aot [cf-sample-app-clojure.core])
```

Now edit your `core.clj` file to create additional routes for our to-do list project.
In the function `defroutes` you can add two additional routes, a route to display a form with a GET request and a route that accept POST requests. The function should look like this:

```clojure
(defroutes app-routes
  (GET "/" [] "Welcome to the Swisscom Application Cloud!")
  (GET "/todo" [] (toDoPage))
  (POST "/todo" [todo] (toDoPage todo))
  (route/resources "/")
  (route/not-found "Not Found"))
```

Additionally, to be able to execute POST requests, we need to disable a security check: the anti forgery CSRF token. Normally this is not advisable and it is better to properly implement the CSRF token. To disable the CSRF token, replace the `app` definition on the `core.clj` file:

```clojure
(def app
  (wrap-defaults app-routes (assoc-in site-defaults [:security :anti-forgery] false)))
```

<p class="note">
<strong>Important</strong>: you just created a security-bug, please be aware of the threat. Therefore, check for example this <a href="https://github.com/edbond/CSRF" target="_blank">tutorial</a> on how to implement correctly a CSRF token for POST requests.
</p>

As you can see, we created the additional routes for the GET request `/todo` as well as for the POST request. We also need to add additional functions to implement the GET and POST requests. We need to create the functions `toDoPageInput` and `toDoPageOutput`. We will also implement a more general function `commonLayout`. All these functions use the <a href="https://github.com/weavejester/hiccup" target="_blank">Hiccup</a> library for representing HTML in Clojure. It uses vectors to represent elements, and maps to represent an element's attributes. With hiccup its easy to dynamically create the HTML pages we need for our form and to display the list of tasks. To use hiccup, we need to add the `:use` keyword to the name space function of the file `core.clj` with the hiccup functions we want to use:

```clojure
(ns cf-sample-app-clojure.core
   (:gen-class)
   (:require [compojure.core :refer :all]
             [compojure.route :as route]
             [ring.adapter.jetty :as jetty]
             [ring.middleware.defaults :refer [wrap-defaults site-defaults]])
   (:use     [hiccup.core]
             [hiccup.page]
             [hiccup.form]
             [hiccup.element]))
```

First we need to implement the general function to render the HTML page. We call this function `commonLayout` and we need to place the following code in our `core.clj`file:

```clojure
(defn commonLayout [&amp; content]
 (html5
   [:head
    [:meta {:charset "utf-8"}]
    [:title "ListOfTasks"]
    (include-css "/css/style.css")
    ]
   [:body content]))
```

The function accepts an argument that is the body of the HTML page. So we can use these functions both to display the form and to display the list of tasks. To do this, we need to implement an additional function. This functions passes the body as argument to the `commonLayout` function. In addition, we defined two additional functions that are needed to save and to get the tasks from the MongoDB. The functions `saveToDo`and `getToDo`.

```clojure
(defn saveToDo [todo]
  (saveToMongo todo))

(defn getToDo []
  (getAllFromMongo))

(defn toDoPage [&amp; [todo]]
  (when todo
    (saveToDo todo))
  (commonLayout
    [:h2 "Todo List"]
    (ordered-list (getToDo))
    [:h2 "Enter a new ToDo"]
    [:form {:method "post" :action "/todo"}
     [:input.text {:type "text" :name "todo"}]
     [:br]
     [:br]
     [:input.action {:type "submit" :value "New"}]]))
```

These two functions are simply calling two functions from another file `mongodb.clj`. On the file `core.clj` we need to update the require list importing all the functions from the file `mongodb.clj`. Here's the complete name space function for the `core.clj` file:

```clojure
(ns cf-sample-app-clojure.core
   (:gen-class)
   (:require [compojure.core :refer :all]
             [compojure.route :as route]
             [ring.adapter.jetty :as jetty]
             [ring.middleware.defaults :refer [wrap-defaults site-defaults]]
             [ring.middleware.logger :as logger]
             [cf-sample-app-clojure.mongodb :refer :all])
   (:use     [hiccup.core]
             [hiccup.page]
             [hiccup.form]
             [hiccup.element]))
```

This file contains the implementation to use the `monger library and connect to the MongoDB.
We need to save the task we get from the text input on the MongoDB. We can do this both locally and both on the Cloud Foundry deployment. First we can try it locally if you have a mongo database installed locally. First of all we create the function name space for the `mongodb.clj`file:

```clojure
(ns cf-sample-app-clojure.mongodb
(:require [monger.core :as mg]
            [monger.collection :as mc])
  (:import [org.bson.types ObjectId]
           [com.mongodb DB WriteConcern]))
```

This snippet of code shows how to import the library `monger` that we will use to access the MongoDB. Now we can implement the function `saveToMongo` that accepts the task as argument.

```clojure
(defn saveToMongo [document]
 (try
  (let  [uri "mongodb://127.0.0.1:27017/monger-test"
         {:keys [conn db]} (mg/connect-via-uri uri)
         coll "todos"]
    (println "Inserting document")
    (mc/insert-and-return db coll {:todo document})
    (println "Document inserted")
    (println "Closing database")
    (mg/disconnect conn))
  (catch Exception e (println (str "caught exception: " (.getMessage e))))))
```

This function accepts the text document as an argument and inserts it into the local MongoDB database `monger-test`in the collection `todos`.

Then we need to implement the function `getAllFromMongo` that gets all the saved tasks on the mongo database:

```clojure
(defn getAllFromMongo []
  (try
    (let [uri "mongodb://127.0.0.1:27017/monger-test"
         {:keys [conn db]} (mg/connect-via-uri uri)
         coll "todos"
         all-documents-in-map (mc/find-maps db coll)
         documents (doall (map #(get % :todo) all-documents-in-map))]
      (mg/disconnect conn)
      documents)
  (catch Exception e (println (str "caught exception: " (.getMessage e))))))
```

This function gets all documents from the MongoDB as maps. Then it extracts all the `todo` documents creating a simple sequence from the lazy sequence returned by the map function. The simple sequence containing all the todo tasks is passed to the `ordered-list` function of hiccup that renders a HTML ordered list containing all the tasks.

To run the application locally, we need to have MongoDB installed locally. First the application must be compiled and executed:

<pre class="terminal">
$ lein uberjar
$ lein run
</pre>

Open [http://localhost:3000/todo](http://localhost:3000/todo) with your web browser. You should see your app running locally.
The application will create a database called "monger-test" on your local MongoDB installation and will add tasks to the "todos" collection.

To do the same on Cloud Foundry, we need to correctly parse the `VCAP_SERVICES` environment variable and to do this we can create a new file `parse.clj` where we can implement this.
We can create the function `getCredentials` that returns a map containing the credentials needed to connect to the MongoDB service:

```clojure
(ns cf-sample-app-clojure.parse
    (require [environ.core :refer [env]]
             [cheshire.core :refer :all]))

(defn getCredentials [service]
  (let [vcap_services (env :vcap-services)
        json_services (parse-string vcap_services true)
        db (get json_services (keyword service))]
    (get (get db 0) :credentials)))
```

We use the libraries `environ` and `cheshire` to do this.
On the file `mongodb.clj` we need to include the `parse.clj` library:

```clojure
(ns cf-sample-app-clojure.mongodb
  (:require [monger.core :as mg]
            [monger.collection :as mc]
            [cf-sample-app-clojure.parse :refer :all])
  (:import [org.bson.types ObjectId]
           [com.mongodb DB WriteConcern]))
```

Now we need to modify the uri in both functions `saveToMongo` and `getAllFromMongo` using the credentials from Cloud Foundry:

```clojure
(defn saveToMongo [document]
 (try
  (let  [credentials (getCredentials "mongodb")
         uri (get credentials :uri "mongodb://127.0.0.1:27017/monger-test")
         {:keys [conn db]} (mg/connect-via-uri uri)
         coll "todos"]
    (println "Inserting document")
    (mc/insert-and-return db coll {:todo document})
    (println "Document inserted")
    (println "Closing database")
    (mg/disconnect conn))
  (catch Exception e (println (str "caught exception: " (.getMessage e))))))

(defn getAllFromMongo []
  (try
    (let [credentials (getCredentials "mongodb")
         uri (get credentials :uri "mongodb://127.0.0.1:27017/monger-test")
         {:keys [conn db]} (mg/connect-via-uri uri)
         coll "todos"
         all-documents-in-map (mc/find-maps db coll)
         documents (doall (map #(get % :todo) all-documents-in-map))]
      (mg/disconnect conn)
      documents)
    (catch Exception e (println (str "caught exception: " (.getMessage e))))))
```

With this latest code we can still experiment locally, since the uri in case the Cloud Foundry credentials are not existing is set to the local one. This allows you to run your app locally as well as in the cloud without having to configure anything differently. So let's push it to the cloud after recompiling it using

<pre class="terminal">
$ lein uberjar
$ cf push my-clojure-app -b java_buildpack -p target/cf-sample-app-clojure-0.1.0-SNAPSHOT-standalone.jar
</pre>

You can access other services like Redis or MariaDB in a similar matter, simply by binding them to your app and accessing them through the environment variables.

You can checkout the finished version of all these changes in the ‘advanced’ branch of the sample app repository, at: https://github.com/swisscom/cf-sample-app-clojure/tree/advanced

<div style="text-align:center;padding:3em;">
  <a href="./manifest.html" class="btn btn-primary">I've bound a service to my App</a>
</div>
